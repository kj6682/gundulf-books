{"version":3,"sources":["components/book-card.js","components/book-list.js","book-data.js","actions/index.js","actions/book-actions.js","views/book-list-view.js","components/book-form.js","views/book-form-view.js","App.js","reducers/book-reducer.js","reducers/index.js","store.js","index.js"],"names":["BookCard","_ref","book","react_default","a","createElement","Card","Content","Header","title","Description","category","author","extra","className","Button","basic","color","BookList","books","map","key","id","client","axios","create","baseURL","headers","Content-Type","url","BookListView","this","props","fetchBooks","Component","connect","state","bookStore","dispatch","type","payload","get","BookForm","BookFormView","book_form","App","Container","NavLink","activeClassName","exact","to","Route","path","component","defaultState","reducers","arguments","length","undefined","action","Object","objectSpread","data","rootReducer","combineReducers","middleware","composeWithDevTools","applyMiddleware","promise","thunk","createStore","ReactDOM","render","BrowserRouter","es","store","src_App","document","getElementById"],"mappings":"wSAGe,SAASA,EAATC,GAA0B,IAAPC,EAAOD,EAAPC,KAChC,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAKC,QAAN,KACEJ,EAAAC,EAAAC,cAACC,EAAA,EAAKE,OAAN,KACGN,EAAKO,OAERN,EAAAC,EAAAC,cAACC,EAAA,EAAKI,YAAN,KACEP,EAAAC,EAAAC,cAAA,SAAIH,EAAKS,UACTR,EAAAC,EAAAC,cAAA,SAAIH,EAAKU,UAGbT,EAAAC,EAAAC,cAACC,EAAA,EAAKC,QAAN,CAAcM,OAAK,GACjBV,EAAAC,EAAAC,cAAA,OAAKS,UAAU,kBACbX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQC,OAAK,EAACC,MAAM,SAApB,QACAd,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAQC,OAAK,EAACC,MAAM,OAApB,aCdK,SAASC,EAATjB,GAA0B,IAAPkB,EAAOlB,EAAPkB,MAUhC,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UATKc,EAAMC,IAAI,SAAAlB,GACf,OACEC,EAAAC,EAAAC,cAACL,EAAD,CAAUqB,IAAKnB,EAAKoB,GAAIpB,KAAMA,QCT/B,aCEMqB,SAASC,EAAMC,OAAO,CACjCC,QAAS,wBACTC,QAAS,CACPC,eAAgB,sBCFdC,EAAM,uBCENC,8LAGFC,KAAKC,MAAMC,8CAIX,OACE9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAACa,EAAD,CAAUC,MAAOY,KAAKC,MAAMb,gBAVTe,aAuBZC,kBANf,SAAyBC,GACvB,MAAO,CACHjB,MAAQiB,EAAMC,UAAUlB,QAIU,CAACc,WDvBlC,WACL,OAAO,SAAAK,GACLA,EAAS,CACPC,KAAM,cACNC,QAASjB,EAAOkB,IAAIZ,QCmBXM,CAAuCL,GChBvCY,mLARX,OACEvC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,4CAJe6B,aCWRS,mLARX,OACExC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuC,EAAD,cAJmBV,aCuBZW,mLAlBX,OACE1C,EAAAC,EAAAC,cAACyC,EAAA,EAAD,KACE3C,EAAAC,EAAAC,cAAA,OAAKS,UAAU,oBACbX,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAASjC,UAAU,OAAOkC,gBAAgB,SAASC,OAAK,EAACC,GAAG,KAA5D,aAGA/C,EAAAC,EAAAC,cAAC0C,EAAA,EAAD,CAASjC,UAAU,OAAOkC,gBAAgB,SAASC,OAAK,EAACC,GAAG,aAA5D,aAIF/C,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAOF,OAAK,EAACG,KAAK,IAAIC,UAAWvB,IACjC3B,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAWV,IACnCxC,EAAAC,EAAAC,cAAC8C,EAAA,EAAD,CAAOC,KAAK,kBAAkBC,UAAWV,YAd/BT,wDCNZoB,EAAe,CACnBnC,MAAO,ICEHoC,EAAW,CACflB,UDAa,WAAmC,IAAlCD,EAAkCoB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA5BF,EAAcK,EAAcH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GACzC,OAAQG,EAAOpB,MACb,IAAK,cACH,OAAOqB,OAAAC,EAAA,EAAAD,CAAA,GACFxB,EADL,CAEEjB,MAAOwC,EAAOnB,UAGlB,IAAK,wBACC,OAAOoB,OAAAC,EAAA,EAAAD,CAAA,GACFxB,EADL,CAEEjB,MAAOwC,EAAOnB,QAAQsB,KAAKA,MAAQH,EAAOnB,QAAQsB,OAG1D,QACE,OAAO1B,KCVE2B,EAFKC,0BAAgBT,GCD9BU,EAAaC,8BAAoBC,0BAAgBC,IAASC,MAEjDC,wBAAYP,EAAaE,iBCCxCM,IAASC,OACPrE,EAAAC,EAAAC,cAACoE,EAAA,EAAD,KACEtE,EAAAC,EAAAC,cAACqE,EAAA,EAAD,CAAUC,MAAOA,GACfxE,EAAAC,EAAAC,cAACuE,EAAD,QAGJC,SAASC,eAAe","file":"static/js/main.f8bc14f2.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, Button } from 'semantic-ui-react'\n\nexport default function BookCard({book}) {\n  return (\n    <Card>\n      <Card.Content>\n        <Card.Header>\n          {book.title}\n        </Card.Header>\n        <Card.Description>\n          <p>{book.category}</p>\n          <p>{book.author}</p>\n        </Card.Description>\n      </Card.Content>\n      <Card.Content extra>\n        <div className=\"ui two buttons\">\n          <Button basic color=\"green\">Edit</Button>\n          <Button basic color=\"red\">Delete</Button>\n        </div>\n      </Card.Content>\n    </Card>\n  )\n}\n\n/*\nBookCard.propTypes = {\n  book: React.PropTypes.object.isRequired\n}\n*/\n","import React from 'react';\nimport { Card } from 'semantic-ui-react';\nimport BookCard from './book-card';\n\nexport default function BookList({books}){\n\n  const list = () => {\n    return books.map(book => {\n      return (\n        <BookCard key={book.id} book={book}/>\n      )\n    })\n  }\n\n  return (\n    <div>\n      <ul>\n        { list() }\n      </ul>\n    </div>\n  )\n}\n","export const books = [\n  {\n    \"id\": 1,\n    \"title\": \"the Hobbit\",\n    \"author\": \"J.R.Tolkien\",\n    \"category\": \"fantasy\"\n  },\n  {\n    \"id\": 2,\n    \"title\": \"1984\",\n    \"author\": \"George Orwell\",\n    \"category\": \"science fiction\"\n  }\n];","import axios from \"axios\";\n\nexport const client = axios.create({\n  baseURL: \"http://localhost:8080\",\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n})","import { books } from '../book-data';\nimport { client } from './';\n\nconst url = '/api/books/v1.0/';\n\nexport function fetchBooks(){\n  return dispatch => {\n    dispatch({\n      type: 'FETCH_BOOKS',\n      payload: client.get(url)\n    })\n  }\n}\n\n","import React, { Component} from 'react';\nimport { connect } from 'react-redux';\nimport BookList from '../components/book-list';\nimport { fetchBooks } from '../actions/book-actions';\n\nclass BookListView extends Component {\n\n  componentDidMount() {\n    this.props.fetchBooks();\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>List of Books</h1>\n        <BookList books={this.props.books}/>\n      </div>\n    )\n  }\n}\n\n// Make contacts  array available in  props\nfunction mapStateToProps(state) {\n  return {\n      books : state.bookStore.books\n  }\n}\n\nexport default connect(mapStateToProps, {fetchBooks})(BookListView);","import React, { Component } from 'react';\n\nclass BookForm extends Component {\n  render() {\n    return (\n      <div>\n        <p>Form under construction</p>\n      </div>\n    )\n  }\n}\n\nexport default BookForm;","import React, { Component} from 'react';\nimport BookForm from '../components/book-form';\n\nclass BookFormView extends Component {\n  render() {\n    return (\n      <div>\n        <BookForm/>\n      </div>\n    )\n  }\n}\n\nexport default BookFormView;","import React, { Component } from 'react';\nimport { NavLink, Route } from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\nimport BookListView from './views/book-list-view';\nimport BookFormView from './views/book-form-view';\n\nclass App extends Component {\n  render() {\n    return (\n      <Container>\n        <div className=\"ui two item menu\">\n          <NavLink className=\"item\" activeClassName=\"active\" exact to=\"/\">\n            Book List\n          </NavLink>\n          <NavLink className=\"item\" activeClassName=\"active\" exact to=\"/book/new\">\n            Add Book\n          </NavLink>\n        </div>\n        <Route exact path=\"/\" component={BookListView}/>\n        <Route path=\"/book/new\" component={BookFormView}/>\n        <Route path=\"/book/edit/:_id\" component={BookFormView}/>\n      </Container>\n    );\n  }\n}\n\nexport default App;","const defaultState = {\n  books: []\n}\n\nexport default (state=defaultState, action={}) => {\n  switch (action.type) {\n    case 'FETCH_BOOKS': {\n      return {\n        ...state,\n        books: action.payload\n      }\n    }\n    case \"FETCH_BOOKS_FULFILLED\": {\n          return {\n            ...state,\n            books: action.payload.data.data || action.payload.data // in case pagination is disabled\n          }\n        }\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport BookReducer from './book-reducer';\n\nconst reducers = {\n  bookStore: BookReducer\n}\n\nconst rootReducer = combineReducers(reducers);\n\nexport default rootReducer;","import { applyMiddleware, createStore } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport promise from \"redux-promise-middleware\";\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from \"./reducers\";\n\nconst middleware = composeWithDevTools(applyMiddleware(promise, thunk));\n\nexport default createStore(rootReducer, middleware);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from \"./store\"\nimport 'semantic-ui-css/semantic.min.css';\nimport './index.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);"],"sourceRoot":""}